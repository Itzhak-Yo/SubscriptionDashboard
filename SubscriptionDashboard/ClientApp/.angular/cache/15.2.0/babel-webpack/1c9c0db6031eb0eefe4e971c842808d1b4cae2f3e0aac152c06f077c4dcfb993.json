{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(apiService, ngZone, router) {\n    this.apiService = apiService;\n    this.ngZone = ngZone;\n    this.router = router;\n    this.accessTokenKey = 'access_token';\n  }\n  login(userId) {\n    return this.apiService.getUser(userId).pipe(map(response => {\n      if (response.success && response.token) {\n        // need to add jwt auth token to api and send it in header with bearer\n        this.accessToken = response.token;\n        this.startTimer();\n        return true;\n      }\n      return false;\n    }), catchError(error => {\n      console.error(error);\n      return of(false);\n    }));\n  }\n  logout() {\n    clearTimeout(this.timerId);\n    localStorage.removeItem(this.accessTokenKey);\n    this.router.navigate(['/login']);\n  }\n  get isLoggedIn() {\n    return !!this.accessToken;\n  }\n  get accessToken() {\n    return localStorage.getItem(this.accessTokenKey);\n  }\n  set accessToken(token) {\n    if (token) {\n      localStorage.setItem(this.accessTokenKey, token);\n    } else {\n      localStorage.removeItem(this.accessTokenKey);\n    }\n  }\n  startTimer() {\n    this.ngZone.runOutsideAngular(() => {\n      this.timerId = setTimeout(() => {\n        this.logout();\n      }, 5 * 60 * 1000); // 5 minutes in milliseconds\n    });\n  }\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;;AAOhD,OAAM,MAAOC,WAAW;EAItBC,YACUC,UAAsB,EACtBC,MAAc,EACdC,MAAc;IAFd,eAAU,GAAVF,UAAU;IACV,WAAM,GAANC,MAAM;IACN,WAAM,GAANC,MAAM;IANR,mBAAc,GAAG,cAAc;EAOpC;EAEIC,KAAK,CAACC,MAAc;IACzB,OAAO,IAAI,CAACJ,UAAU,CAACK,OAAO,CAACD,MAAM,CAAC,CAACE,IAAI,CACzCT,GAAG,CAAEU,QAAa,IAAI;MACpB,IAAIA,QAAQ,CAACC,OAAO,IAAID,QAAQ,CAACE,KAAK,EAAE;QACtC;QACA,IAAI,CAACC,WAAW,GAAGH,QAAQ,CAACE,KAAK;QACjC,IAAI,CAACE,UAAU,EAAE;QACjB,OAAO,IAAI;;MAEb,OAAO,KAAK;IACd,CAAC,CAAC,EACFf,UAAU,CAAEgB,KAAK,IAAI;MACnBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB,OAAOjB,EAAE,CAAC,KAAK,CAAC;IAClB,CAAC,CAAC,CACH;EACH;EAEOmB,MAAM;IACXC,YAAY,CAAC,IAAI,CAACC,OAAO,CAAC;IAC1BC,YAAY,CAACC,UAAU,CAAC,IAAI,CAACC,cAAc,CAAC;IAC5C,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEA,IAAWC,UAAU;IACnB,OAAO,CAAC,CAAC,IAAI,CAACX,WAAW;EAC3B;EAEA,IAAWA,WAAW;IACpB,OAAOO,YAAY,CAACK,OAAO,CAAC,IAAI,CAACH,cAAc,CAAC;EAClD;EAEA,IAAWT,WAAW,CAACD,KAAoB;IACzC,IAAIA,KAAK,EAAE;MACTQ,YAAY,CAACM,OAAO,CAAC,IAAI,CAACJ,cAAc,EAAEV,KAAK,CAAC;KACjD,MAAM;MACLQ,YAAY,CAACC,UAAU,CAAC,IAAI,CAACC,cAAc,CAAC;;EAEhD;EAEQR,UAAU;IAChB,IAAI,CAACV,MAAM,CAACuB,iBAAiB,CAAC,MAAK;MACjC,IAAI,CAACR,OAAO,GAAGS,UAAU,CAAC,MAAK;QAC7B,IAAI,CAACX,MAAM,EAAE;MACf,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC;EACJ;;;AAxDWhB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA4B,SAAX5B,WAAW;EAAA6B,YAFV;AAAM","names":["of","catchError","map","AuthService","constructor","apiService","ngZone","router","login","userId","getUser","pipe","response","success","token","accessToken","startTimer","error","console","logout","clearTimeout","timerId","localStorage","removeItem","accessTokenKey","navigate","isLoggedIn","getItem","setItem","runOutsideAngular","setTimeout","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\USER\\Desktop\\SubscriptionDashboard\\SubscriptionDashboard\\ClientApp\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { ApiService } from './api.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private accessTokenKey = 'access_token';\r\n  private timerId!: any;\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private ngZone: NgZone,\r\n    private router: Router\r\n  ) {}\r\n\r\n  public login(userId: number): Observable<boolean> {\r\n    return this.apiService.getUser(userId).pipe(\r\n      map((response: any) => {\r\n        if (response.success && response.token) {\r\n          // need to add jwt auth token to api and send it in header with bearer\r\n          this.accessToken = response.token;\r\n          this.startTimer();\r\n          return true;\r\n        }\r\n        return false;\r\n      }),\r\n      catchError((error) => {\r\n        console.error(error);\r\n        return of(false);\r\n      })\r\n    );\r\n  }\r\n\r\n  public logout(): void {\r\n    clearTimeout(this.timerId);\r\n    localStorage.removeItem(this.accessTokenKey);\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  public get isLoggedIn(): boolean {\r\n    return !!this.accessToken;\r\n  }\r\n\r\n  public get accessToken(): string | null {\r\n    return localStorage.getItem(this.accessTokenKey);\r\n  }\r\n\r\n  public set accessToken(token: string | null) {\r\n    if (token) {\r\n      localStorage.setItem(this.accessTokenKey, token);\r\n    } else {\r\n      localStorage.removeItem(this.accessTokenKey);\r\n    }\r\n  }\r\n\r\n  private startTimer(): void {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      this.timerId = setTimeout(() => {\r\n        this.logout();\r\n      }, 5 * 60 * 1000); // 5 minutes in milliseconds\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}