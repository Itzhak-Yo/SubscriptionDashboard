{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class ApiService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.baseUrl = 'http://localhost:3000/api';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  attachToken(httpOptions) {\n    const token = this.authService.accessToken;\n    if (token) {\n      httpOptions.headers = httpOptions.headers.set('Authorization', `Bearer ${token}`);\n    }\n    return httpOptions;\n  }\n  getUser(userId) {\n    return this.http.get(`${this.baseUrl}/users/${userId}`);\n  }\n  getContract(contractId) {\n    return this.http.get(`${this.baseUrl}/contracts/${contractId}`);\n  }\n  updateUserAddress(userId, address) {\n    return this.http.put(`${this.baseUrl}/users/${userId}/address`, {\n      address\n    });\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAS9D,OAAM,MAAOC,UAAU;EAQrBC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,SAAI,GAAJD,IAAI;IAAsB,gBAAW,GAAXC,WAAW;IAPjD,YAAO,GAAG,2BAA2B;IACrC,gBAAW,GAAG;MACpBC,OAAO,EAAE,IAAIL,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EAEwE;EAEjEM,WAAW,CAACC,WAAgB;IAClC,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,WAAW;IAC1C,IAAID,KAAK,EAAE;MACTD,WAAW,CAACF,OAAO,GAAGE,WAAW,CAACF,OAAO,CAACK,GAAG,CAC3C,eAAe,EACf,UAAUF,KAAK,EAAE,CAClB;;IAEH,OAAOD,WAAW;EACpB;EAEAI,OAAO,CAACC,MAAc;IACpB,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAQ,GAAG,IAAI,CAACC,OAAO,UAAUF,MAAM,EAAE,CAAC;EAChE;EAEAG,WAAW,CAACC,UAAkB;IAC5B,OAAO,IAAI,CAACb,IAAI,CAACU,GAAG,CAAY,GAAG,IAAI,CAACC,OAAO,cAAcE,UAAU,EAAE,CAAC;EAC5E;EAEAC,iBAAiB,CAACL,MAAc,EAAEM,OAAiB;IACjD,OAAO,IAAI,CAACf,IAAI,CAACgB,GAAG,CAAQ,GAAG,IAAI,CAACL,OAAO,UAAUF,MAAM,UAAU,EAAE;MACrEM;KACD,CAAC;EACJ;;AAjCWjB,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAmB,SAAVnB,UAAU;EAAAoB,YAFT;AAAM","names":["HttpHeaders","ApiService","constructor","http","authService","headers","attachToken","httpOptions","token","accessToken","set","getUser","userId","get","baseUrl","getContract","contractId","updateUserAddress","address","put","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\USER\\Desktop\\SubscriptionDashboard\\SubscriptionDashboard\\ClientApp\\src\\app\\core\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { IAddress, IUser } from '../models/user.model';\r\nimport { IContract } from '../models/contract';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ApiService {\r\n  private baseUrl = 'http://localhost:3000/api';\r\n  private httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  };\r\n\r\n  constructor(private http: HttpClient, private authService: AuthService) {}\r\n\r\n  private attachToken(httpOptions: any): any {\r\n    const token = this.authService.accessToken;\r\n    if (token) {\r\n      httpOptions.headers = httpOptions.headers.set(\r\n        'Authorization',\r\n        `Bearer ${token}`\r\n      );\r\n    }\r\n    return httpOptions;\r\n  }\r\n\r\n  getUser(userId: number): Observable<IUser> {\r\n    return this.http.get<IUser>(`${this.baseUrl}/users/${userId}`);\r\n  }\r\n\r\n  getContract(contractId: number): Observable<IContract> {\r\n    return this.http.get<IContract>(`${this.baseUrl}/contracts/${contractId}`);\r\n  }\r\n\r\n  updateUserAddress(userId: number, address: IAddress): Observable<IUser> {\r\n    return this.http.put<IUser>(`${this.baseUrl}/users/${userId}/address`, {\r\n      address,\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}