{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nexport class AuthService {\n  constructor(apiService, ngZone) {\n    this.apiService = apiService;\n    this.ngZone = ngZone;\n    this.accessTokenKey = 'access_token';\n  }\n  login(userId) {\n    return this.apiService.getUser(userId).pipe(map(response => {\n      if (response.token) {\n        this.accessToken = response.token;\n        return true;\n      }\n      return false;\n    }), catchError(error => {\n      console.error(error);\n      return of(false);\n    }));\n  }\n  logout() {\n    localStorage.removeItem(this.accessTokenKey);\n  }\n  get isLoggedIn() {\n    return !!this.accessToken;\n  }\n  get accessToken() {\n    return localStorage.getItem(this.accessTokenKey);\n  }\n  set accessToken(token) {\n    if (token) {\n      localStorage.setItem(this.accessTokenKey, token);\n    } else {\n      localStorage.removeItem(this.accessTokenKey);\n    }\n  }\n  startTimer() {\n    this.timerId = setTimeout(() => {\n      this.ngZone.run(() => {\n        this.logout();\n      });\n    }, 5 * 60 * 1000); // 5 minutes in milliseconds\n  }\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i0.NgZone));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAEC,GAAG,QAAoB,gBAAgB;;;AAM5D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,UAAsB,EAAUC,MAAc;IAA9C,eAAU,GAAVD,UAAU;IAAsB,WAAM,GAANC,MAAM;IAFlD,mBAAc,GAAG,cAAc;EAE8B;EAE9DC,KAAK,CAACC,MAAc;IACzB,OAAO,IAAI,CAACH,UAAU,CAACI,OAAO,CAACD,MAAM,CAAC,CAACE,IAAI,CACzCR,GAAG,CAAES,QAAa,IAAI;MACpB,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAClB,IAAI,CAACC,WAAW,GAAGF,QAAQ,CAACC,KAAK;QACjC,OAAO,IAAI;;MAEb,OAAO,KAAK;IACd,CAAC,CAAC,EACFX,UAAU,CAAEa,KAAK,IAAI;MACnBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB,OAAOd,EAAE,CAAC,KAAK,CAAC;IAClB,CAAC,CAAC,CACH;EACH;EAEOgB,MAAM;IACXC,YAAY,CAACC,UAAU,CAAC,IAAI,CAACC,cAAc,CAAC;EAC9C;EAEA,IAAWC,UAAU;IACnB,OAAO,CAAC,CAAC,IAAI,CAACP,WAAW;EAC3B;EAEA,IAAWA,WAAW;IACpB,OAAOI,YAAY,CAACI,OAAO,CAAC,IAAI,CAACF,cAAc,CAAC;EAClD;EAEA,IAAWN,WAAW,CAACD,KAAoB;IACzC,IAAIA,KAAK,EAAE;MACTK,YAAY,CAACK,OAAO,CAAC,IAAI,CAACH,cAAc,EAAEP,KAAK,CAAC;KACjD,MAAM;MACLK,YAAY,CAACC,UAAU,CAAC,IAAI,CAACC,cAAc,CAAC;;EAEhD;EAEQI,UAAU;IAChB,IAAI,CAACC,OAAO,GAAGC,UAAU,CAAC,MAAK;MAC7B,IAAI,CAACnB,MAAM,CAACoB,GAAG,CAAC,MAAK;QACnB,IAAI,CAACV,MAAM,EAAE;MACf,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB;;;AA/CWb,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAwB,SAAXxB,WAAW;EAAAyB,YAFV;AAAM","names":["of","catchError","map","AuthService","constructor","apiService","ngZone","login","userId","getUser","pipe","response","token","accessToken","error","console","logout","localStorage","removeItem","accessTokenKey","isLoggedIn","getItem","setItem","startTimer","timerId","setTimeout","run","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\USER\\Desktop\\SubscriptionDashboard\\SubscriptionDashboard\\ClientApp\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mapTo, tap } from 'rxjs/operators';\r\nimport { ApiService } from './api.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private accessTokenKey = 'access_token';\r\n\r\n  constructor(private apiService: ApiService, private ngZone: NgZone) {}\r\n\r\n  public login(userId: number): Observable<boolean> {\r\n    return this.apiService.getUser(userId).pipe(\r\n      map((response: any) => {\r\n        if (response.token) {\r\n          this.accessToken = response.token;\r\n          return true;\r\n        }\r\n        return false;\r\n      }),\r\n      catchError((error) => {\r\n        console.error(error);\r\n        return of(false);\r\n      })\r\n    );\r\n  }\r\n\r\n  public logout(): void {\r\n    localStorage.removeItem(this.accessTokenKey);\r\n  }\r\n\r\n  public get isLoggedIn(): boolean {\r\n    return !!this.accessToken;\r\n  }\r\n\r\n  public get accessToken(): string | null {\r\n    return localStorage.getItem(this.accessTokenKey);\r\n  }\r\n\r\n  public set accessToken(token: string | null) {\r\n    if (token) {\r\n      localStorage.setItem(this.accessTokenKey, token);\r\n    } else {\r\n      localStorage.removeItem(this.accessTokenKey);\r\n    }\r\n  }\r\n\r\n  private startTimer(): void {\r\n    this.timerId = setTimeout(() => {\r\n      this.ngZone.run(() => {\r\n        this.logout();\r\n      });\r\n    }, 5 * 60 * 1000); // 5 minutes in milliseconds\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}